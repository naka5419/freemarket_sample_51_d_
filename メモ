

      t.string :nickname,           null: false
      t.string :firstname,          null: false
      t.string :lastname,           null: false
      t.string :firstname_kana,     null: false
      t.string :lastname_kana,      null: false
      t.integer :birthday,          null: false
      t.integer :postalcode,        null: false
      t.string :prefecture,         null: false
      t.string :city_name,          null: false
      t.string :address_number,     null: false
      t.string :building_name
      t.integer :phone_number,      unique: true, null: false
      t.string :user_image
      t.text :profile

new_user_session

登録するカラム追加 application_controller.rb

before_action :configure_permitted_parameters, if: :devise_controller?

  protected

  def configure_permitted_parameters
    devise_parameter_sanitizer.permit(:sign_up, keys: [:nickname, :firstname, :lastname, :firstname_kana, :lastname_kana, :birthday, :postalcode, :prefecture, :city_name, :address_number, :building_name, :phone_number])
  end

コントローラー作成
rails g controller users

DBマイグレート
rake db:migrate

DB ロールバック
rake db:rollback

３つ前にロールバック
rake db:rollback STEP=3

未ログイン時ログインページ遷移
before_action :authenticate_user!

パス明示的に指定
<%= form_for @変数, url: ~_path do |f| %>
<% end %>


バリデーション
youtubeという文字を含んでいるか(正規表現)
VALID_YOUTUBE_URL_REGEX = /\A.*youtube.*\z/
validates :text, presence: true, format: { with: VALID_YOUTUBE_URL_REGEX }


テスト
rails g rspec:install

bundle exec rspec

it "条件文" do
user = build(:user, password: "00000", password_confirmation: "00000")
"buildの内容を上書きしている"
user.valid?
"バリデーションされれば"
expect(user.errors[:password][0]).to include("is too short")

バリデーション

１ページ目のバリデーションだけとりあえずテストする

css
親要素の幅に合わせる
width: 100%;
box-sizing: border-box;


enum 列挙型

gemを探す


ログアウト
    -# %li
    -#   = link_to "ログアウト", destroy_user_session_path, method: :delete
